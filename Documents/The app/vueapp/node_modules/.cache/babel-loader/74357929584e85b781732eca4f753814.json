{"remainingRequest":"/Users/nguyenle/Documents/The app/vueapp/node_modules/babel-loader/lib/index.js!/Users/nguyenle/Documents/The app/vueapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nguyenle/Documents/The app/vueapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nguyenle/Documents/The app/vueapp/src/components/VirusTracker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nguyenle/Documents/The app/vueapp/src/components/VirusTracker.vue","mtime":1584926611647},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/cache-loader/dist/cjs.js","mtime":1584466643176},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/babel-loader/lib/index.js","mtime":1584466643178},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/cache-loader/dist/cjs.js","mtime":1584466643176},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/vue-loader/lib/index.js","mtime":1584466647407}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:cmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciKTsKCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCnZhciBuZXdfY2FzZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibmV3X2Nhc2UiKTsKdmFyIG5ld19kZWF0aCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJuZXdfZGVhdGgiKTsKdmFyIHRvdGFsX2RlYXRoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInRvdGFsX2RlYXRoIik7CnZhciB0b3RhbF9yZWNvdmVyZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidG90YWxfcmVjb3ZlcmVkIik7CnZhciB0b3RhbF9jYXNlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ0b3RhbF9jYXNlcyIpOwp2YXIgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY291bnRyaWVzX3N0YXQnKTsKZmV0Y2goImh0dHBzOi8vY29yb25hdmlydXMtbW9uaXRvci5wLnJhcGlkYXBpLmNvbS9jb3JvbmF2aXJ1cy93b3JsZHN0YXQucGhwIiwgewogICJtZXRob2QiOiAiR0VUIiwKICAiaGVhZGVycyI6IHsKICAgICJ4LXJhcGlkYXBpLWhvc3QiOiAiY29yb25hdmlydXMtbW9uaXRvci5wLnJhcGlkYXBpLmNvbSIsCiAgICAieC1yYXBpZGFwaS1rZXkiOiAiNTMwMDkyODZhMG1zaGRjOGVjMzU2ZjdhYTIwNXAxZTBlODBqc241ODU4ZjU0OGVkNTMiCiAgfQp9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogIHJldHVybiByZXNwb25zZS5qc29uKCkudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgY29uc29sZS5sb2coZGF0YSk7CiAgICB0b3RhbF9jYXNlcy5pbm5lckhUTUwgPSBkYXRhLnRvdGFsX2Nhc2VzOwogICAgbmV3X2Nhc2VzLmlubmVySFRNTCA9IGRhdGEubmV3X2Nhc2VzOwogICAgbmV3X2RlYXRoLmlubmVySFRNTCA9IGRhdGEubmV3X2RlYXRoczsKICAgIHRvdGFsX2RlYXRoLmlubmVySFRNTCA9IGRhdGEudG90YWxfZGVhdGhzOwogICAgdG90YWxfcmVjb3ZlcmVkLmlubmVySFRNTCA9IGRhdGEudG90YWxfcmVjb3ZlcmVkOwogIH0pOwp9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgY29uc29sZS5sb2coZXJyKTsKfSk7CmZldGNoKCJodHRwczovL2Nvcm9uYXZpcnVzLW1vbml0b3IucC5yYXBpZGFwaS5jb20vY29yb25hdmlydXMvbGF0ZXN0X3N0YXRfYnlfY291bnRyeS5waHA/Y291bnRyeT0lM0NyZXF1aXJlZCUzRSIsIHsKICAibWV0aG9kIjogIkdFVCIsCiAgImhlYWRlcnMiOiB7CiAgICAieC1yYXBpZGFwaS1ob3N0IjogImNvcm9uYXZpcnVzLW1vbml0b3IucC5yYXBpZGFwaS5jb20iLAogICAgIngtcmFwaWRhcGkta2V5IjogIjdlMmE1OGY0N2Vtc2hiOTUyNGFhNzhhY2Y5ZjhwMTRiMDBianNuYTc5MjYyNWQxY2EwIgogIH0KfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICByZXR1cm4gcmVzcG9uc2UuanNvbigpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgIGNvbnNvbGUubG9nKGRhdGEpOwogICAgdmFyIGNvdW50cmllc19zdGF0ID0gZGF0YS5jb3VudHJpZXNfc3RhdDsgLy9HZXR0aW5nIGFsbCB0aGUgY291bnRyeSBzdGF0aXN0aWMgdXNpbmcgYSBsb29wCgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudHJpZXNfc3RhdC5sZW5ndGg7IGkrKykgewogICAgICBjb25zb2xlLmxvZyhjb3VudHJpZXNfc3RhdFtpXSk7IC8vd2Ugd2lsbCBzdGFydCBieSBpbnNlcnRpbmcgdGhlIG5ldyByb3dzIGluc2lkZSBvdXIgdGFibGUKCiAgICAgIHZhciByb3cgPSB0YWJsZS5pbnNlcnRSb3coaSArIDEpOwogICAgICB2YXIgY291bnRyeV9uYW1lID0gcm93Lmluc2VydENlbGwoMCk7CiAgICAgIHZhciBjYXNlcyA9IHJvdy5pbnNlcnRDZWxsKDEpOwogICAgICB2YXIgZGVhdGhzID0gcm93Lmluc2VydENlbGwoMik7CiAgICAgIHZhciBzZXJpb3VzX2NyaXRpY2FsID0gcm93Lmluc2VydENlbGwoMyk7CiAgICAgIHZhciByZWNvdmVyZWRfcGVyX2NvdW50cnkgPSByb3cuaW5zZXJ0Q2VsbCg0KTsKICAgICAgY291bnRyeV9uYW1lLmlubmVySFRNTCA9IGNvdW50cmllc19zdGF0W2ldLmNvdW50cnlfbmFtZTsKICAgICAgY2FzZXMuaW5uZXJIVE1MID0gY291bnRyaWVzX3N0YXRbaV0uY2FzZXM7CiAgICAgIGRlYXRocy5pbm5lckhUTUwgPSBjb3VudHJpZXNfc3RhdFtpXS5kZWF0aHM7CiAgICAgIHNlcmlvdXNfY3JpdGljYWwuaW5uZXJIVE1MID0gY291bnRyaWVzX3N0YXRbaV0uc2VyaW91c19jcml0aWNhbDsKICAgICAgcmVjb3ZlcmVkX3Blcl9jb3VudHJ5LmlubmVySFRNTCA9IGNvdW50cmllc19zdGF0W2ldLnRvdGFsX3JlY292ZXJlZDsKICAgIH0KICB9KTsKfSkuY2F0Y2goZnVuY3Rpb24gKGVycikgewogIGNvbnNvbGUubG9nKGVycik7Cn0pOw=="},{"version":3,"sources":["VirusTracker.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"container\">\n        <h3>Virus Tracker:</h3>\n          <section v-if=\"errored\">\n    <p>We're sorry, we're not able to retrieve this information at the moment, please try back later</p>\n  </section>\n        <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Total Cases</th>\n                <th scope=\"col\">Total Recovered</th>\n                <th scope=\"col\">Total Deaths</th>\n            </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td id=\"total_cases\"></td>\n            <!-- <td id=\"total_recovered\"></td>\n            <td id=\"total_death\"></td> -->\n            <!-- <td id=\"total_recovered\"></td>\n            <td id=\"total_death\"></td>\n            <td id=\"new_death\"></td>\n            <td id=\"new_case\"></td> -->\n        </tr>\n        </tbody>\n    </table> \n    </div>\n</template>\n\n<script>\nlet new_cases = document.getElementById(\"new_case\");\nlet new_death = document.getElementById(\"new_death\");\nlet total_death = document.getElementById(\"total_death\");\nlet total_recovered = document.getElementById(\"total_recovered\");\nlet total_cases = document.getElementById(\"total_cases\")\nlet table = document.getElementById('countries_stat')\n\n    fetch(\"https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php\", {\n    \"method\": \"GET\",\n    \"headers\": {\n        \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"53009286a0mshdc8ec356f7aa205p1e0e80jsn5858f548ed53\"\n    }\n})\n.then(response => response.json().then( data => {\n    console.log(data);\n    total_cases.innerHTML = data.total_cases;\n    new_cases.innerHTML = data.new_cases;\n    new_death.innerHTML = data.new_deaths;\n    total_death.innerHTML = data.total_deaths;\n    total_recovered.innerHTML = data.total_recovered;\n\n})).catch(err => {\n    console.log(err);\n});\nfetch(\"https://coronavirus-monitor.p.rapidapi.com/coronavirus/latest_stat_by_country.php?country=%3Crequired%3E\", {\n\t\"method\": \"GET\",\n\t\"headers\": {\n\t\t\"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\n\t\t\"x-rapidapi-key\": \"7e2a58f47emshb9524aa78acf9f8p14b00bjsna792625d1ca0\"\n\t}\n})\n.then(response => response.json().then(data =>{\n    console.log(data)\n    let countries_stat = data.countries_stat;\n//Getting all the country statistic using a loop\n    for (let i = 0; i<countries_stat.length;i++){\n        console.log(countries_stat[i]);\n        //we will start by inserting the new rows inside our table\n        let row = table.insertRow(i+1);\n        let country_name = row.insertCell(0);\n        let cases = row.insertCell(1);\n        let deaths = row.insertCell(2);\n        let serious_critical = row.insertCell(3);\n        let recovered_per_country = row.insertCell(4);\n        country_name.innerHTML = countries_stat[i].country_name;\n        cases.innerHTML = countries_stat[i].cases;\n        deaths.innerHTML = countries_stat[i].deaths;\n        serious_critical.innerHTML = countries_stat[i].serious_critical;\n        recovered_per_country.innerHTML = countries_stat[i].total_recovered;\n    }\n}))\n.catch(err => {\n    console.log(err);\n});\n</script>\n\n<style>\n  h3 {\n    margin-bottom: 5%;\n  }\n</style>\n"],"sourceRoot":"src/components"}]}