{"remainingRequest":"/Users/nguyenle/Documents/The app/vueapp/node_modules/babel-loader/lib/index.js!/Users/nguyenle/Documents/The app/vueapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/nguyenle/Documents/The app/vueapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nguyenle/Documents/The app/vueapp/src/components/VirusTracker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nguyenle/Documents/The app/vueapp/src/components/VirusTracker.vue","mtime":1585175927803},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/cache-loader/dist/cjs.js","mtime":1584466643176},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/babel-loader/lib/index.js","mtime":1584466643178},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/cache-loader/dist/cjs.js","mtime":1584466643176},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/vue-loader/lib/index.js","mtime":1584466647407}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:cmVxdWlyZSgiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciKTsKCi8vCi8vCi8vCi8vCi8vCi8vCnZhciBuZXdfY2FzZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibmV3X2Nhc2UiKTsKdmFyIG5ld19kZWF0aCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJuZXdfZGVhdGgiKTsKdmFyIHRvdGFsX2RlYXRoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInRvdGFsX2RlYXRoIik7CnZhciB0b3RhbF9yZWNvdmVyZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidG90YWxfcmVjb3ZlcmVkIik7CnZhciB0b3RhbF9jYXNlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ0b3RhbF9jYXNlcyIpOwp2YXIgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY291bnRyaWVzX3N0YXQnKTsKZmV0Y2goImh0dHBzOi8vY29yb25hdmlydXMtbW9uaXRvci5wLnJhcGlkYXBpLmNvbS9jb3JvbmF2aXJ1cy93b3JsZHN0YXQucGhwIiwgewogICJtZXRob2QiOiAiR0VUIiwKICAiaGVhZGVycyI6IHsKICAgICJ4LXJhcGlkYXBpLWhvc3QiOiAiY29yb25hdmlydXMtbW9uaXRvci5wLnJhcGlkYXBpLmNvbSIsCiAgICAieC1yYXBpZGFwaS1rZXkiOiAiNTMwMDkyODZhMG1zaGRjOGVjMzU2ZjdhYTIwNXAxZTBlODBqc241ODU4ZjU0OGVkNTMiCiAgfQp9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogIHJldHVybiByZXNwb25zZS5qc29uKCkudGhlbihmdW5jdGlvbiAoZGF0YSkgewogICAgY29uc29sZS5sb2coZGF0YSk7CiAgICB0b3RhbF9jYXNlcy5pbm5lckhUTUwgPSBkYXRhLnRvdGFsX2Nhc2VzOwogICAgbmV3X2Nhc2VzLmlubmVySFRNTCA9IGRhdGEubmV3X2Nhc2VzOwogICAgbmV3X2RlYXRoLmlubmVySFRNTCA9IGRhdGEubmV3X2RlYXRoczsKICAgIHRvdGFsX2RlYXRoLmlubmVySFRNTCA9IGRhdGEudG90YWxfZGVhdGhzOwogICAgdG90YWxfcmVjb3ZlcmVkLmlubmVySFRNTCA9IGRhdGEudG90YWxfcmVjb3ZlcmVkOwogIH0pOwp9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CiAgY29uc29sZS5sb2coZXJyKTsKfSk7CnZhciBjb3VudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY291bnRyeSIpOwp2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImxpbmsiKTsKZmV0Y2goImh0dHBzOi8vY29yb25hLmxtYW8ubmluamEvY291bnRyaWVzIikudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICByZXR1cm4gcmVzcG9uc2UuanNvbigpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsKICAgIGNvbnNvbGUubG9nKGRhdGEpOwogICAgdmFyIGNvdW50cmllc19zdGF0ID0gZGF0YTsgLy9HZXR0aW5nIGFsbCB0aGUgY291bnRyeSBzdGF0aXN0aWMgdXNpbmcgYSBsb29wCgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudHJpZXNfc3RhdC5sZW5ndGg7IGkrKykgewogICAgICBjb25zb2xlLmxvZyhjb3VudHJpZXNfc3RhdFtpXSk7IC8vd2Ugd2lsbCBzdGFydCBieSBpbnNlcnRpbmcgdGhlIG5ldyByb3dzIGluc2lkZSBvdXIgdGFibGUKCiAgICAgIHZhciByb3cgPSB0YWJsZS5pbnNlcnRSb3coaSArIDEpOwogICAgICBjb3VudHJ5ID0gcm93Lmluc2VydENlbGwoMCk7CiAgICAgIHZhciBjYXNlcyA9IHJvdy5pbnNlcnRDZWxsKDEpOwogICAgICB2YXIgdG9kYXlDYXNlcyA9IHJvdy5pbnNlcnRDZWxsKDIpOwogICAgICB2YXIgZGVhdGhzID0gcm93Lmluc2VydENlbGwoMyk7CiAgICAgIHZhciB0b2RheURlYXRocyA9IHJvdy5pbnNlcnRDZWxsKDQpOwogICAgICB2YXIgcmVjb3ZlcmVkID0gcm93Lmluc2VydENlbGwoNSk7CiAgICAgIHZhciBhY3RpdmUgPSByb3cuaW5zZXJ0Q2VsbCg2KTsKICAgICAgdmFyIGNyaXRpY2FsID0gcm93Lmluc2VydENlbGwoNyk7CiAgICAgIHZhciBjYXNlc1Blck9uZU1pbGxpb24gPSByb3cuaW5zZXJ0Q2VsbCg4KTsKICAgICAgdmFyIGRlYXRoc1Blck9uZU1pbGxpb24gPSByb3cuaW5zZXJ0Q2VsbCg5KTsKICAgICAgdmFyIGNvdW50cnlJbmZvID0gY291bnRyaWVzX3N0YXRbaV0uY291bnRyeUluZm87CiAgICAgIGxpbmsgPSBjb3VudHJ5SW5mby5mbGFnOwogICAgICBjb3VudHJ5LmlubmVySFRNTCA9IGNvdW50cmllc19zdGF0W2ldLmNvdW50cnkgKyAiPGJyPiI7CiAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTsKICAgICAgaW1nLnNyYyA9IGxpbms7CiAgICAgIGNvdW50cnkuYXBwZW5kQ2hpbGQoaW1nKTsKICAgICAgY2FzZXMuaW5uZXJIVE1MID0gY291bnRyaWVzX3N0YXRbaV0uY2FzZXM7CiAgICAgIHRvZGF5Q2FzZXMuaW5uZXJIVE1MID0gY291bnRyaWVzX3N0YXRbaV0udG9kYXlDYXNlczsKICAgICAgZGVhdGhzLmlubmVySFRNTCA9IGNvdW50cmllc19zdGF0W2ldLmRlYXRoczsKICAgICAgdG9kYXlEZWF0aHMuaW5uZXJIVE1MID0gY291bnRyaWVzX3N0YXRbaV0udG9kYXlEZWF0aHM7CiAgICAgIHJlY292ZXJlZC5pbm5lckhUTUwgPSBjb3VudHJpZXNfc3RhdFtpXS5yZWNvdmVyZWQ7CiAgICAgIGFjdGl2ZS5pbm5lckhUTUwgPSBjb3VudHJpZXNfc3RhdFtpXS5hY3RpdmU7CiAgICAgIGNyaXRpY2FsLmlubmVySFRNTCA9IGNvdW50cmllc19zdGF0W2ldLmNyaXRpY2FsOwogICAgICBjYXNlc1Blck9uZU1pbGxpb24uaW5uZXJIVE1MID0gY291bnRyaWVzX3N0YXRbaV0uY2FzZXNQZXJPbmVNaWxsaW9uOwogICAgICBkZWF0aHNQZXJPbmVNaWxsaW9uLmlubmVySFRNTCA9IGNvdW50cmllc19zdGF0W2ldLmRlYXRoc1Blck9uZU1pbGxpb247CiAgICB9CiAgfSk7Cn0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKICBjb25zb2xlLmxvZyhlcnIpOwp9KTs="},{"version":3,"sources":["VirusTracker.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"container\">\n        <img id=\"flag\" src =\"https://raw.githubusercontent.com/NovelCOVID/API/master/assets/flags/cn.png\"/>;\n    </div>\n</template>\n\n<script>\n\n\nlet new_cases = document.getElementById(\"new_case\");\nlet new_death = document.getElementById(\"new_death\");\nlet total_death = document.getElementById(\"total_death\");\nlet total_recovered = document.getElementById(\"total_recovered\");\nlet total_cases = document.getElementById(\"total_cases\");\nlet table = document.getElementById('countries_stat');\n\nfetch(\"https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php\", {\n    \"method\": \"GET\",\n    \"headers\": {\n        \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"53009286a0mshdc8ec356f7aa205p1e0e80jsn5858f548ed53\"\n    }\n})\n.then(response => response.json().then( data => {\n    console.log(data);\n    total_cases.innerHTML = data.total_cases;\n    new_cases.innerHTML = data.new_cases;\n    new_death.innerHTML = data.new_deaths;\n    total_death.innerHTML = data.total_deaths;\n    total_recovered.innerHTML = data.total_recovered;\n\n})).catch(err => {\n    console.log(err);\n});\n\nlet country = document.createElement(\"country\");\nlet link = document.createElement(\"link\");\nfetch(\"https://corona.lmao.ninja/countries\")\n.then(response => response.json().then(data =>{\n    console.log(data);\n    let countries_stat = data;\n//Getting all the country statistic using a loop\n    for (let i = 0; i<countries_stat.length;i++){\n        console.log(countries_stat[i]);\n        //we will start by inserting the new rows inside our table\n        let row = table.insertRow(i+1);\n        country = row.insertCell(0);\n        let cases = row.insertCell(1);\n        let todayCases = row.insertCell(2);\n        let deaths = row.insertCell(3);\n        let todayDeaths = row.insertCell(4);\n        let recovered = row.insertCell(5);\n        let active = row.insertCell(6);\n        let critical = row.insertCell(7);\n        let casesPerOneMillion = row.insertCell(8);\n        let deathsPerOneMillion = row.insertCell(9);\n\n        let countryInfo = countries_stat[i].countryInfo;\n        link = countryInfo.flag;\n\n        country.innerHTML = countries_stat[i].country + \"<br>\";\n\n        var img = new Image();\n        img.src = link;\n        country.appendChild(img);\n\n        cases.innerHTML = countries_stat[i].cases;\n        todayCases.innerHTML = countries_stat[i].todayCases;\n        deaths.innerHTML = countries_stat[i].deaths;\n        todayDeaths.innerHTML = countries_stat[i].todayDeaths;\n        recovered .innerHTML = countries_stat[i].recovered ;\n        active.innerHTML = countries_stat[i].active;\n        critical.innerHTML = countries_stat[i].critical;\n        casesPerOneMillion.innerHTML = countries_stat[i].casesPerOneMillion;\n        deathsPerOneMillion.innerHTML = countries_stat[i].deathsPerOneMillion;\n    }\n}))\n.catch(err => {\n    console.log(err);\n});\n\n\n</script>\n\n\n<style>\n  h3 {\n    margin-bottom: 5%;\n  }\n</style>\n"],"sourceRoot":"src/components"}]}