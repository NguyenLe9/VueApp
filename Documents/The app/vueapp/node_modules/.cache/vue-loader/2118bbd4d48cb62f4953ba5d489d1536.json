{"remainingRequest":"/Users/nguyenle/Documents/The app/vueapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nguyenle/Documents/The app/vueapp/src/components/VirusTracker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nguyenle/Documents/The app/vueapp/src/components/VirusTracker.vue","mtime":1584926611647},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/cache-loader/dist/cjs.js","mtime":1584466643176},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/babel-loader/lib/index.js","mtime":1584466643178},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/cache-loader/dist/cjs.js","mtime":1584466643176},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/vue-loader/lib/index.js","mtime":1584466647407}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmxldCBuZXdfY2FzZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgibmV3X2Nhc2UiKTsKbGV0IG5ld19kZWF0aCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJuZXdfZGVhdGgiKTsKbGV0IHRvdGFsX2RlYXRoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInRvdGFsX2RlYXRoIik7CmxldCB0b3RhbF9yZWNvdmVyZWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidG90YWxfcmVjb3ZlcmVkIik7CmxldCB0b3RhbF9jYXNlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ0b3RhbF9jYXNlcyIpCmxldCB0YWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3VudHJpZXNfc3RhdCcpCgogICAgZmV0Y2goImh0dHBzOi8vY29yb25hdmlydXMtbW9uaXRvci5wLnJhcGlkYXBpLmNvbS9jb3JvbmF2aXJ1cy93b3JsZHN0YXQucGhwIiwgewogICAgIm1ldGhvZCI6ICJHRVQiLAogICAgImhlYWRlcnMiOiB7CiAgICAgICAgIngtcmFwaWRhcGktaG9zdCI6ICJjb3JvbmF2aXJ1cy1tb25pdG9yLnAucmFwaWRhcGkuY29tIiwKICAgICAgICAieC1yYXBpZGFwaS1rZXkiOiAiNTMwMDkyODZhMG1zaGRjOGVjMzU2ZjdhYTIwNXAxZTBlODBqc241ODU4ZjU0OGVkNTMiCiAgICB9Cn0pCi50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKS50aGVuKCBkYXRhID0+IHsKICAgIGNvbnNvbGUubG9nKGRhdGEpOwogICAgdG90YWxfY2FzZXMuaW5uZXJIVE1MID0gZGF0YS50b3RhbF9jYXNlczsKICAgIG5ld19jYXNlcy5pbm5lckhUTUwgPSBkYXRhLm5ld19jYXNlczsKICAgIG5ld19kZWF0aC5pbm5lckhUTUwgPSBkYXRhLm5ld19kZWF0aHM7CiAgICB0b3RhbF9kZWF0aC5pbm5lckhUTUwgPSBkYXRhLnRvdGFsX2RlYXRoczsKICAgIHRvdGFsX3JlY292ZXJlZC5pbm5lckhUTUwgPSBkYXRhLnRvdGFsX3JlY292ZXJlZDsKCn0pKS5jYXRjaChlcnIgPT4gewogICAgY29uc29sZS5sb2coZXJyKTsKfSk7CmZldGNoKCJodHRwczovL2Nvcm9uYXZpcnVzLW1vbml0b3IucC5yYXBpZGFwaS5jb20vY29yb25hdmlydXMvbGF0ZXN0X3N0YXRfYnlfY291bnRyeS5waHA/Y291bnRyeT0lM0NyZXF1aXJlZCUzRSIsIHsKCSJtZXRob2QiOiAiR0VUIiwKCSJoZWFkZXJzIjogewoJCSJ4LXJhcGlkYXBpLWhvc3QiOiAiY29yb25hdmlydXMtbW9uaXRvci5wLnJhcGlkYXBpLmNvbSIsCgkJIngtcmFwaWRhcGkta2V5IjogIjdlMmE1OGY0N2Vtc2hiOTUyNGFhNzhhY2Y5ZjhwMTRiMDBianNuYTc5MjYyNWQxY2EwIgoJfQp9KQoudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkudGhlbihkYXRhID0+ewogICAgY29uc29sZS5sb2coZGF0YSkKICAgIGxldCBjb3VudHJpZXNfc3RhdCA9IGRhdGEuY291bnRyaWVzX3N0YXQ7Ci8vR2V0dGluZyBhbGwgdGhlIGNvdW50cnkgc3RhdGlzdGljIHVzaW5nIGEgbG9vcAogICAgZm9yIChsZXQgaSA9IDA7IGk8Y291bnRyaWVzX3N0YXQubGVuZ3RoO2krKyl7CiAgICAgICAgY29uc29sZS5sb2coY291bnRyaWVzX3N0YXRbaV0pOwogICAgICAgIC8vd2Ugd2lsbCBzdGFydCBieSBpbnNlcnRpbmcgdGhlIG5ldyByb3dzIGluc2lkZSBvdXIgdGFibGUKICAgICAgICBsZXQgcm93ID0gdGFibGUuaW5zZXJ0Um93KGkrMSk7CiAgICAgICAgbGV0IGNvdW50cnlfbmFtZSA9IHJvdy5pbnNlcnRDZWxsKDApOwogICAgICAgIGxldCBjYXNlcyA9IHJvdy5pbnNlcnRDZWxsKDEpOwogICAgICAgIGxldCBkZWF0aHMgPSByb3cuaW5zZXJ0Q2VsbCgyKTsKICAgICAgICBsZXQgc2VyaW91c19jcml0aWNhbCA9IHJvdy5pbnNlcnRDZWxsKDMpOwogICAgICAgIGxldCByZWNvdmVyZWRfcGVyX2NvdW50cnkgPSByb3cuaW5zZXJ0Q2VsbCg0KTsKICAgICAgICBjb3VudHJ5X25hbWUuaW5uZXJIVE1MID0gY291bnRyaWVzX3N0YXRbaV0uY291bnRyeV9uYW1lOwogICAgICAgIGNhc2VzLmlubmVySFRNTCA9IGNvdW50cmllc19zdGF0W2ldLmNhc2VzOwogICAgICAgIGRlYXRocy5pbm5lckhUTUwgPSBjb3VudHJpZXNfc3RhdFtpXS5kZWF0aHM7CiAgICAgICAgc2VyaW91c19jcml0aWNhbC5pbm5lckhUTUwgPSBjb3VudHJpZXNfc3RhdFtpXS5zZXJpb3VzX2NyaXRpY2FsOwogICAgICAgIHJlY292ZXJlZF9wZXJfY291bnRyeS5pbm5lckhUTUwgPSBjb3VudHJpZXNfc3RhdFtpXS50b3RhbF9yZWNvdmVyZWQ7CiAgICB9Cn0pKQouY2F0Y2goZXJyID0+IHsKICAgIGNvbnNvbGUubG9nKGVycik7Cn0pOwo="},{"version":3,"sources":["VirusTracker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VirusTracker.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"container\">\n        <h3>Virus Tracker:</h3>\n          <section v-if=\"errored\">\n    <p>We're sorry, we're not able to retrieve this information at the moment, please try back later</p>\n  </section>\n        <table class=\"table\">\n        <thead>\n            <tr>\n                <th scope=\"col\">Total Cases</th>\n                <th scope=\"col\">Total Recovered</th>\n                <th scope=\"col\">Total Deaths</th>\n            </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td id=\"total_cases\"></td>\n            <!-- <td id=\"total_recovered\"></td>\n            <td id=\"total_death\"></td> -->\n            <!-- <td id=\"total_recovered\"></td>\n            <td id=\"total_death\"></td>\n            <td id=\"new_death\"></td>\n            <td id=\"new_case\"></td> -->\n        </tr>\n        </tbody>\n    </table> \n    </div>\n</template>\n\n<script>\nlet new_cases = document.getElementById(\"new_case\");\nlet new_death = document.getElementById(\"new_death\");\nlet total_death = document.getElementById(\"total_death\");\nlet total_recovered = document.getElementById(\"total_recovered\");\nlet total_cases = document.getElementById(\"total_cases\")\nlet table = document.getElementById('countries_stat')\n\n    fetch(\"https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php\", {\n    \"method\": \"GET\",\n    \"headers\": {\n        \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"53009286a0mshdc8ec356f7aa205p1e0e80jsn5858f548ed53\"\n    }\n})\n.then(response => response.json().then( data => {\n    console.log(data);\n    total_cases.innerHTML = data.total_cases;\n    new_cases.innerHTML = data.new_cases;\n    new_death.innerHTML = data.new_deaths;\n    total_death.innerHTML = data.total_deaths;\n    total_recovered.innerHTML = data.total_recovered;\n\n})).catch(err => {\n    console.log(err);\n});\nfetch(\"https://coronavirus-monitor.p.rapidapi.com/coronavirus/latest_stat_by_country.php?country=%3Crequired%3E\", {\n\t\"method\": \"GET\",\n\t\"headers\": {\n\t\t\"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\n\t\t\"x-rapidapi-key\": \"7e2a58f47emshb9524aa78acf9f8p14b00bjsna792625d1ca0\"\n\t}\n})\n.then(response => response.json().then(data =>{\n    console.log(data)\n    let countries_stat = data.countries_stat;\n//Getting all the country statistic using a loop\n    for (let i = 0; i<countries_stat.length;i++){\n        console.log(countries_stat[i]);\n        //we will start by inserting the new rows inside our table\n        let row = table.insertRow(i+1);\n        let country_name = row.insertCell(0);\n        let cases = row.insertCell(1);\n        let deaths = row.insertCell(2);\n        let serious_critical = row.insertCell(3);\n        let recovered_per_country = row.insertCell(4);\n        country_name.innerHTML = countries_stat[i].country_name;\n        cases.innerHTML = countries_stat[i].cases;\n        deaths.innerHTML = countries_stat[i].deaths;\n        serious_critical.innerHTML = countries_stat[i].serious_critical;\n        recovered_per_country.innerHTML = countries_stat[i].total_recovered;\n    }\n}))\n.catch(err => {\n    console.log(err);\n});\n</script>\n\n<style>\n  h3 {\n    margin-bottom: 5%;\n  }\n</style>\n"]}]}