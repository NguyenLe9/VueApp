{"remainingRequest":"/Users/nguyenle/Documents/The app/vueapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/nguyenle/Documents/The app/vueapp/src/components/VirusTracker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/nguyenle/Documents/The app/vueapp/src/components/VirusTracker.vue","mtime":1585175927803},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/cache-loader/dist/cjs.js","mtime":1584466643176},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/babel-loader/lib/index.js","mtime":1584466643178},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/cache-loader/dist/cjs.js","mtime":1584466643176},{"path":"/Users/nguyenle/Documents/The app/vueapp/node_modules/vue-loader/lib/index.js","mtime":1584466647407}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KCgoKbGV0IG5ld19jYXNlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJuZXdfY2FzZSIpOwpsZXQgbmV3X2RlYXRoID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm5ld19kZWF0aCIpOwpsZXQgdG90YWxfZGVhdGggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidG90YWxfZGVhdGgiKTsKbGV0IHRvdGFsX3JlY292ZXJlZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ0b3RhbF9yZWNvdmVyZWQiKTsKbGV0IHRvdGFsX2Nhc2VzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInRvdGFsX2Nhc2VzIik7CmxldCB0YWJsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb3VudHJpZXNfc3RhdCcpOwoKZmV0Y2goImh0dHBzOi8vY29yb25hdmlydXMtbW9uaXRvci5wLnJhcGlkYXBpLmNvbS9jb3JvbmF2aXJ1cy93b3JsZHN0YXQucGhwIiwgewogICAgIm1ldGhvZCI6ICJHRVQiLAogICAgImhlYWRlcnMiOiB7CiAgICAgICAgIngtcmFwaWRhcGktaG9zdCI6ICJjb3JvbmF2aXJ1cy1tb25pdG9yLnAucmFwaWRhcGkuY29tIiwKICAgICAgICAieC1yYXBpZGFwaS1rZXkiOiAiNTMwMDkyODZhMG1zaGRjOGVjMzU2ZjdhYTIwNXAxZTBlODBqc241ODU4ZjU0OGVkNTMiCiAgICB9Cn0pCi50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKS50aGVuKCBkYXRhID0+IHsKICAgIGNvbnNvbGUubG9nKGRhdGEpOwogICAgdG90YWxfY2FzZXMuaW5uZXJIVE1MID0gZGF0YS50b3RhbF9jYXNlczsKICAgIG5ld19jYXNlcy5pbm5lckhUTUwgPSBkYXRhLm5ld19jYXNlczsKICAgIG5ld19kZWF0aC5pbm5lckhUTUwgPSBkYXRhLm5ld19kZWF0aHM7CiAgICB0b3RhbF9kZWF0aC5pbm5lckhUTUwgPSBkYXRhLnRvdGFsX2RlYXRoczsKICAgIHRvdGFsX3JlY292ZXJlZC5pbm5lckhUTUwgPSBkYXRhLnRvdGFsX3JlY292ZXJlZDsKCn0pKS5jYXRjaChlcnIgPT4gewogICAgY29uc29sZS5sb2coZXJyKTsKfSk7CgpsZXQgY291bnRyeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNvdW50cnkiKTsKbGV0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsaW5rIik7CmZldGNoKCJodHRwczovL2Nvcm9uYS5sbWFvLm5pbmphL2NvdW50cmllcyIpCi50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKS50aGVuKGRhdGEgPT57CiAgICBjb25zb2xlLmxvZyhkYXRhKTsKICAgIGxldCBjb3VudHJpZXNfc3RhdCA9IGRhdGE7Ci8vR2V0dGluZyBhbGwgdGhlIGNvdW50cnkgc3RhdGlzdGljIHVzaW5nIGEgbG9vcAogICAgZm9yIChsZXQgaSA9IDA7IGk8Y291bnRyaWVzX3N0YXQubGVuZ3RoO2krKyl7CiAgICAgICAgY29uc29sZS5sb2coY291bnRyaWVzX3N0YXRbaV0pOwogICAgICAgIC8vd2Ugd2lsbCBzdGFydCBieSBpbnNlcnRpbmcgdGhlIG5ldyByb3dzIGluc2lkZSBvdXIgdGFibGUKICAgICAgICBsZXQgcm93ID0gdGFibGUuaW5zZXJ0Um93KGkrMSk7CiAgICAgICAgY291bnRyeSA9IHJvdy5pbnNlcnRDZWxsKDApOwogICAgICAgIGxldCBjYXNlcyA9IHJvdy5pbnNlcnRDZWxsKDEpOwogICAgICAgIGxldCB0b2RheUNhc2VzID0gcm93Lmluc2VydENlbGwoMik7CiAgICAgICAgbGV0IGRlYXRocyA9IHJvdy5pbnNlcnRDZWxsKDMpOwogICAgICAgIGxldCB0b2RheURlYXRocyA9IHJvdy5pbnNlcnRDZWxsKDQpOwogICAgICAgIGxldCByZWNvdmVyZWQgPSByb3cuaW5zZXJ0Q2VsbCg1KTsKICAgICAgICBsZXQgYWN0aXZlID0gcm93Lmluc2VydENlbGwoNik7CiAgICAgICAgbGV0IGNyaXRpY2FsID0gcm93Lmluc2VydENlbGwoNyk7CiAgICAgICAgbGV0IGNhc2VzUGVyT25lTWlsbGlvbiA9IHJvdy5pbnNlcnRDZWxsKDgpOwogICAgICAgIGxldCBkZWF0aHNQZXJPbmVNaWxsaW9uID0gcm93Lmluc2VydENlbGwoOSk7CgogICAgICAgIGxldCBjb3VudHJ5SW5mbyA9IGNvdW50cmllc19zdGF0W2ldLmNvdW50cnlJbmZvOwogICAgICAgIGxpbmsgPSBjb3VudHJ5SW5mby5mbGFnOwoKICAgICAgICBjb3VudHJ5LmlubmVySFRNTCA9IGNvdW50cmllc19zdGF0W2ldLmNvdW50cnkgKyAiPGJyPiI7CgogICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTsKICAgICAgICBpbWcuc3JjID0gbGluazsKICAgICAgICBjb3VudHJ5LmFwcGVuZENoaWxkKGltZyk7CgogICAgICAgIGNhc2VzLmlubmVySFRNTCA9IGNvdW50cmllc19zdGF0W2ldLmNhc2VzOwogICAgICAgIHRvZGF5Q2FzZXMuaW5uZXJIVE1MID0gY291bnRyaWVzX3N0YXRbaV0udG9kYXlDYXNlczsKICAgICAgICBkZWF0aHMuaW5uZXJIVE1MID0gY291bnRyaWVzX3N0YXRbaV0uZGVhdGhzOwogICAgICAgIHRvZGF5RGVhdGhzLmlubmVySFRNTCA9IGNvdW50cmllc19zdGF0W2ldLnRvZGF5RGVhdGhzOwogICAgICAgIHJlY292ZXJlZCAuaW5uZXJIVE1MID0gY291bnRyaWVzX3N0YXRbaV0ucmVjb3ZlcmVkIDsKICAgICAgICBhY3RpdmUuaW5uZXJIVE1MID0gY291bnRyaWVzX3N0YXRbaV0uYWN0aXZlOwogICAgICAgIGNyaXRpY2FsLmlubmVySFRNTCA9IGNvdW50cmllc19zdGF0W2ldLmNyaXRpY2FsOwogICAgICAgIGNhc2VzUGVyT25lTWlsbGlvbi5pbm5lckhUTUwgPSBjb3VudHJpZXNfc3RhdFtpXS5jYXNlc1Blck9uZU1pbGxpb247CiAgICAgICAgZGVhdGhzUGVyT25lTWlsbGlvbi5pbm5lckhUTUwgPSBjb3VudHJpZXNfc3RhdFtpXS5kZWF0aHNQZXJPbmVNaWxsaW9uOwogICAgfQp9KSkKLmNhdGNoKGVyciA9PiB7CiAgICBjb25zb2xlLmxvZyhlcnIpOwp9KTsKCgo="},{"version":3,"sources":["VirusTracker.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"VirusTracker.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"container\">\n        <img id=\"flag\" src =\"https://raw.githubusercontent.com/NovelCOVID/API/master/assets/flags/cn.png\"/>;\n    </div>\n</template>\n\n<script>\n\n\nlet new_cases = document.getElementById(\"new_case\");\nlet new_death = document.getElementById(\"new_death\");\nlet total_death = document.getElementById(\"total_death\");\nlet total_recovered = document.getElementById(\"total_recovered\");\nlet total_cases = document.getElementById(\"total_cases\");\nlet table = document.getElementById('countries_stat');\n\nfetch(\"https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php\", {\n    \"method\": \"GET\",\n    \"headers\": {\n        \"x-rapidapi-host\": \"coronavirus-monitor.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"53009286a0mshdc8ec356f7aa205p1e0e80jsn5858f548ed53\"\n    }\n})\n.then(response => response.json().then( data => {\n    console.log(data);\n    total_cases.innerHTML = data.total_cases;\n    new_cases.innerHTML = data.new_cases;\n    new_death.innerHTML = data.new_deaths;\n    total_death.innerHTML = data.total_deaths;\n    total_recovered.innerHTML = data.total_recovered;\n\n})).catch(err => {\n    console.log(err);\n});\n\nlet country = document.createElement(\"country\");\nlet link = document.createElement(\"link\");\nfetch(\"https://corona.lmao.ninja/countries\")\n.then(response => response.json().then(data =>{\n    console.log(data);\n    let countries_stat = data;\n//Getting all the country statistic using a loop\n    for (let i = 0; i<countries_stat.length;i++){\n        console.log(countries_stat[i]);\n        //we will start by inserting the new rows inside our table\n        let row = table.insertRow(i+1);\n        country = row.insertCell(0);\n        let cases = row.insertCell(1);\n        let todayCases = row.insertCell(2);\n        let deaths = row.insertCell(3);\n        let todayDeaths = row.insertCell(4);\n        let recovered = row.insertCell(5);\n        let active = row.insertCell(6);\n        let critical = row.insertCell(7);\n        let casesPerOneMillion = row.insertCell(8);\n        let deathsPerOneMillion = row.insertCell(9);\n\n        let countryInfo = countries_stat[i].countryInfo;\n        link = countryInfo.flag;\n\n        country.innerHTML = countries_stat[i].country + \"<br>\";\n\n        var img = new Image();\n        img.src = link;\n        country.appendChild(img);\n\n        cases.innerHTML = countries_stat[i].cases;\n        todayCases.innerHTML = countries_stat[i].todayCases;\n        deaths.innerHTML = countries_stat[i].deaths;\n        todayDeaths.innerHTML = countries_stat[i].todayDeaths;\n        recovered .innerHTML = countries_stat[i].recovered ;\n        active.innerHTML = countries_stat[i].active;\n        critical.innerHTML = countries_stat[i].critical;\n        casesPerOneMillion.innerHTML = countries_stat[i].casesPerOneMillion;\n        deathsPerOneMillion.innerHTML = countries_stat[i].deathsPerOneMillion;\n    }\n}))\n.catch(err => {\n    console.log(err);\n});\n\n\n</script>\n\n\n<style>\n  h3 {\n    margin-bottom: 5%;\n  }\n</style>\n"]}]}